/**
 * 平衡二叉查找树，平衡树：红黑树、Splay Tree（伸展树）、Treap（树堆）
 * 
 * 产生原因：
 * 极端情况下，二叉树会退化为链表，时间复杂度会变为O(n);
 * 解决这个复杂度退化问题，需要设计一种，平衡二叉查找树
 * 
 * 平衡：
 * 让整棵树看起来比较'对称'，不会，子树过高，过矮
 * 
 * 定义：
 * 二叉树中任意一个节点的左右子树的高度相差不能大于 1。
 * 
 * 要求：
 * 1. 一类被标记为黑色，一类被标记为红色
 * 2. 根节点是黑色的；
 * 3. 每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；
 * 4. 任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；
 * 5. 每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；
 */